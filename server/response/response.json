```json
{
  "questions": [
    {
      "id": 1,
      "question": "What is the time complexity of searching for an element in a sorted array using binary search?",
      "options": ["O(n)", "O(log n)", "O(n^2)", "O(1)"],
      "correctAnswer": "O(log n)"
    },
    {
      "id": 2,
      "question": "Which data structure uses LIFO (Last-In, First-Out) principle?",
      "options": ["Queue", "Stack", "Linked List", "Heap"],
      "correctAnswer": "Stack"
    },
    {
      "id": 3,
      "question": "What is the average time complexity of inserting an element into a hash table?",
      "options": ["O(n)", "O(log n)", "O(1)", "O(n^2)"],
      "correctAnswer": "O(1)"
    },
    {
      "id": 4,
      "question": "Which sorting algorithm has a worst-case time complexity of O(n^2)?",
      "options": ["Merge Sort", "Quick Sort", "Heap Sort", "Bubble Sort"],
      "correctAnswer": "Bubble Sort"
    },
    {
      "id": 5,
      "question": "What is a graph traversal algorithm used to find the shortest path between nodes?",
      "options": ["Depth-First Search (DFS)", "Breadth-First Search (BFS)", "Topological Sort", "Kruskal's Algorithm"],
      "correctAnswer": "Breadth-First Search (BFS)"
    },
    {
      "id": 6,
      "question": "What data structure is best suited for implementing a priority queue?",
      "options": ["Array", "Linked List", "Binary Heap", "Stack"],
      "correctAnswer": "Binary Heap"
    },
    {
      "id": 7,
      "question": "What is the space complexity of a recursive function that uses a stack to store its calls?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
      "correctAnswer": "O(n)"
    },
    {
      "id": 8,
      "question": "Which tree traversal method visits the root node last?",
      "options": ["Preorder", "Inorder", "Postorder", "Levelorder"],
      "correctAnswer": "Postorder"
    },
    {
      "id": 9,
      "question": "What algorithm is used to detect cycles in a graph?",
      "options": ["Topological Sort", "Dijkstra's Algorithm", "Depth-First Search (DFS)", "Kruskal's Algorithm"],
      "correctAnswer": "Depth-First Search (DFS)"
    },
    {
      "id": 10,
      "question": "What is the best-case time complexity of QuickSort?",
      "options": ["O(n log n)", "O(n)", "O(n^2)", "O(log n)"],
      "correctAnswer": "O(n log n)"
    },
    {
      "id": 11,
      "question": "What is a self-balancing binary search tree?",
      "options": ["AVL Tree", "Binary Tree", "Complete Binary Tree", "Red-Black Tree"],
      "correctAnswer": "AVL Tree"
    },
    {
      "id": 12,
      "question": "What is the purpose of a Trie data structure?",
      "options": ["Sorting", "Searching", "Graph Traversal", "Priority Queue"],
      "correctAnswer": "Searching"
    },
    {
      "id": 13,
      "question": "Which data structure is used to efficiently implement the LRU cache?",
      "options": ["Queue", "Stack", "Doubly Linked List", "Hash Table"],
      "correctAnswer": "Doubly Linked List"
    },
    {
      "id": 14,
      "question": "What is the time complexity of finding the kth smallest element in an unsorted array?",
      "options": ["O(n)", "O(log n)", "O(n log n)", "O(k log k)"],
      "correctAnswer": "O(n)"
    },
    {
      "id": 15,
      "question": "What algorithm is used to find the minimum spanning tree of a graph?",
      "options": ["Dijkstra's Algorithm", "Bellman-Ford Algorithm", "Prim's Algorithm", "Floyd-Warshall Algorithm"],
      "correctAnswer": "Prim's Algorithm"
    },
    {
      "id": 16,
      "question": "What is dynamic programming?",
      "options": ["A data structure", "A sorting algorithm", "An optimization technique", "A graph traversal algorithm"],
      "correctAnswer": "An optimization technique"
    },
    {
      "id": 17,
      "question": "What is the difference between a linked list and an array?",
      "options": ["Linked lists have fixed size, arrays do not", "Arrays have fixed size, linked lists do not", "Both have fixed sizes", "Neither has fixed sizes"],
      "correctAnswer": "Arrays have fixed size, linked lists do not"
    },
    {
      "id": 18,
      "question": "What is a deadlock in the context of concurrent programming?",
      "options": ["A race condition", "A process waiting indefinitely for a resource", "A system crash", "A memory leak"],
      "correctAnswer": "A process waiting indefinitely for a resource"
    },
    {
      "id": 19,
      "question": "What is the purpose of a heap data structure?",
      "options": ["To store key-value pairs efficiently", "To maintain a sorted order", "To implement a priority queue", "To represent a graph"],
      "correctAnswer": "To implement a priority queue"
    },
    {
      "id": 20,
      "question": "What is the space complexity of merge sort?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
      "correctAnswer": "O(n)"
    },
    {
      "id": 21,
      "question": "How does a hash table handle collisions?",
      "options": ["It throws an error", "It ignores the colliding element", "It uses techniques like chaining or probing", "It resizes automatically"],
      "correctAnswer": "It uses techniques like chaining or probing"
    },
    {
      "id": 22,
      "question": "What is the time complexity of deleting a node from a binary search tree?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
      "correctAnswer": "O(log n)"
    },
    {
      "id": 23,
      "question": "What is a topological sort?",
      "options": ["A sorting algorithm for integers", "A sorting algorithm for graphs with directed acyclic edges", "A way to find shortest paths in a graph", "A way to find strongly connected components"],
      "correctAnswer": "A sorting algorithm for graphs with directed acyclic edges"
    },
    {
      "id": 24,
      "question": "What is the difference between BFS and DFS?",
      "options": ["BFS explores nodes level by level, DFS explores nodes depth-first", "BFS explores nodes depth-first, DFS explores nodes level by level", "Both are the same", "One is for trees, one is for graphs"],
      "correctAnswer": "BFS explores nodes level by level, DFS explores nodes depth-first"
    },
    {
      "id": 25,
      "question": "What is amortized analysis in algorithm analysis?",
      "options": ["Worst-case time complexity", "Average-case time complexity", "Analyzing the average cost per operation over a sequence of operations", "Space complexity analysis"],
      "correctAnswer": "Analyzing the average cost per operation over a sequence of operations"
    },
    {
      "id": 26,
      "question": "What is Big O notation used for?",
      "options": ["Measuring exact runtime", "Describing the upper bound of an algorithm's runtime", "Describing the lower bound of an algorithm's runtime", "Measuring memory usage"],
      "correctAnswer": "Describing the upper bound of an algorithm's runtime"
    },
    {
      "id": 27,
      "question": "Which data structure is best for implementing a FIFO (First-In, First-Out) queue?",
      "options": ["Stack", "Linked List", "Queue", "Heap"],
      "correctAnswer": "Queue"
    },
    {
      "id": 28,
      "question": "What is a red-black tree?",
      "options": ["A type of binary search tree", "A type of hash table", "A type of linked list", "A type of graph"],
      "correctAnswer": "A type of binary search tree"
    },
    {
      "id": 29,
      "question": "What is the time complexity of inserting an element into a sorted linked list?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
      "correctAnswer": "O(n)"
    },
    {
      "id": 30,
      "question": "What is a space-time tradeoff?",
      "options": ["Using less space results in faster execution", "Using more space can result in faster execution", "Using more time results in less space usage", "Space and time usage are always inversely proportional"],
      "correctAnswer": "Using more space can result in faster execution"
    }
  ]
}
```