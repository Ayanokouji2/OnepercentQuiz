{
	"questions": [
		{
			"id": 1,
			"question": "What is the primary purpose of JSX in React?",
			"options": [
				"Styling components",
				"Defining component logic",
				"Writing HTML-like syntax within JavaScript",
				"Handling asynchronous operations"
			],
			"correctAnswer": "Writing HTML-like syntax within JavaScript"
		},
		{
			"id": 2,
			"question": "Which hook is used for performing side effects in React components?",
			"options": ["useState", "useEffect", "useContext", "useReducer"],
			"correctAnswer": "useEffect"
		},
		{
			"id": 3,
			"question": "What is the purpose of keys in React lists?",
			"options": [
				"To style list items",
				"To uniquely identify list items, aiding in efficient updates",
				"To define the order of items in the list",
				"To handle events on list items"
			],
			"correctAnswer": "To uniquely identify list items, aiding in efficient updates"
		},
		{
			"id": 4,
			"question": "What is the difference between controlled and uncontrolled components in React?",
			"options": [
				"Controlled components use refs, uncontrolled components use state.",
				"Controlled components handle data within the component's state, uncontrolled components rely on the DOM.",
				"Controlled components are functional, uncontrolled components are class-based.",
				"There is no difference."
			],
			"correctAnswer": "Controlled components handle data within the component's state, uncontrolled components rely on the DOM."
		},
		{
			"id": 5,
			"question": "What is React Router primarily used for?",
			"options": [
				"Managing state",
				"Handling HTTP requests",
				"Navigation between different views in a React application",
				"Styling components"
			],
			"correctAnswer": "Navigation between different views in a React application"
		},
		{
			"id": 6,
			"question": "Which lifecycle method is called after a component renders?",
			"options": [
				"componentDidMount",
				"componentDidUpdate",
				"componentWillUnmount",
				"render"
			],
			"correctAnswer": "componentDidMount"
		},
		{
			"id": 7,
			"question": "What does prop drilling refer to in React?",
			"options": [
				"The process of optimizing component performance.",
				"The process of passing data through multiple nested components.",
				"The process of handling errors in React applications.",
				"The process of styling components using CSS-in-JS."
			],
			"correctAnswer": "The process of passing data through multiple nested components."
		},
		{
			"id": 8,
			"question": "What is the purpose of React Context API?",
			"options": [
				"To manage global state and avoid prop drilling.",
				"To handle asynchronous operations.",
				"To create reusable components.",
				"To perform server-side rendering."
			],
			"correctAnswer": "To manage global state and avoid prop drilling."
		},
		{
			"id": 9,
			"question": "What is a Higher-Order Component (HOC)?",
			"options": [
				"A function that takes a component as an argument and returns a new enhanced component.",
				"A component that renders other components.",
				"A component that handles state management.",
				"A component that performs API calls."
			],
			"correctAnswer": "A function that takes a component as an argument and returns a new enhanced component."
		},
		{
			"id": 10,
			"question": "What is the purpose of `useMemo` hook?",
			"options": [
				"To memoize the result of a calculation, preventing unnecessary recalculations.",
				"To manage state.",
				"To perform side effects.",
				"To create refs."
			],
			"correctAnswer": "To memoize the result of a calculation, preventing unnecessary recalculations."
		},
		{
			"id": 11,
			"question": "What is the purpose of middleware in Express.js?",
			"options": [
				"To handle routing",
				"To perform tasks in the request-response cycle, like logging or authentication",
				"To connect to databases",
				"To render HTML"
			],
			"correctAnswer": "To perform tasks in the request-response cycle, like logging or authentication"
		},
		{
			"id": 12,
			"question": "What does REST stand for?",
			"options": [
				"Representational State Transfer",
				"Resource Exchange Standard Technology",
				"Reliable Electronic System Transmission",
				"Real-time Event Streaming Technology"
			],
			"correctAnswer": "Representational State Transfer"
		},
		{
			"id": 13,
			"question": "Which HTTP method is typically used for creating a new resource?",
			"options": ["GET", "POST", "PUT", "DELETE"],
			"correctAnswer": "POST"
		},
		{
			"id": 14,
			"question": "What is the purpose of `body-parser` (or similar middleware) in Express.js?",
			"options": [
				"To parse incoming request bodies (e.g., JSON, URL-encoded)",
				"To handle sessions",
				"To manage cookies",
				"To handle errors"
			],
			"correctAnswer": "To parse incoming request bodies (e.g., JSON, URL-encoded)"
		},
		{
			"id": 15,
			"question": "What is the role of `npm` or `yarn` in Node.js development?",
			"options": [
				"To manage server processes",
				"To handle routing",
				"To manage project dependencies (packages)",
				"To compile code"
			],
			"correctAnswer": "To manage project dependencies (packages)"
		},
		{
			"id": 16,
			"question": "What is the purpose of the `require()` function in Node.js?",
			"options": [
				"To define variables",
				"To include modules or files",
				"To handle events",
				"To perform calculations"
			],
			"correctAnswer": "To include modules or files"
		},
		{
			"id": 17,
			"question": "What is the event loop in Node.js?",
			"options": [
				"A mechanism for handling asynchronous operations efficiently.",
				"A loop for rendering HTML.",
				"A mechanism for managing databases.",
				"A loop for performing calculations."
			],
			"correctAnswer": "A mechanism for handling asynchronous operations efficiently."
		},
		{
			"id": 18,
			"question": "What is the purpose of the `process` object in Node.js?",
			"options": [
				"To manage files.",
				"To provide information about the current Node.js process.",
				"To handle network requests.",
				"To manage databases."
			],
			"correctAnswer": "To provide information about the current Node.js process."
		},
		{
			"id": 19,
			"question": "What is the difference between `process.nextTick()` and `setTimeout()` in Node.js?",
			"options": [
				"They both perform the same function.",
				"`process.nextTick()` executes the callback immediately after the current operation completes, before the event loop continues, while `setTimeout()` executes the callback after a specified delay.",
				"`setTimeout()` executes the callback immediately, while `process.nextTick()` executes it after a delay.",
				"`process.nextTick()` is used for handling errors, while `setTimeout()` is used for scheduling tasks."
			],
			"correctAnswer": "`process.nextTick()` executes the callback immediately after the current operation completes, before the event loop continues, while `setTimeout()` executes the callback after a specified delay."
		},
		{
			"id": 20,
			"question": "What is a common way to handle environment variables in a Node.js application?",
			"options": [
				"Using inline JavaScript.",
				"Using a `.env` file and a package like `dotenv`.",
				"Hardcoding them into the code.",
				"Storing them in the database."
			],
			"correctAnswer": "Using a `.env` file and a package like `dotenv`."
		},
		{
			"id": 21,
			"question": "What type of database is MongoDB?",
			"options": [
				"Relational (SQL)",
				"NoSQL (Document-oriented)",
				"Graph",
				"Key-value"
			],
			"correctAnswer": "NoSQL (Document-oriented)"
		},
		{
			"id": 22,
			"question": "What is a 'collection' in MongoDB analogous to in a relational database?",
			"options": ["A table", "A row", "A column", "A database"],
			"correctAnswer": "A table"
		},
		{
			"id": 23,
			"question": "What format are documents stored in MongoDB?",
			"options": ["XML", "JSON-like (BSON)", "CSV", "SQL"],
			"correctAnswer": "JSON-like (BSON)"
		},
		{
			"id": 24,
			"question": "Which MongoDB operator is used to find documents where a field is within a specified range?",
			"options": [
				"$eq",
				"$gt and $lt (or $gte and $lte)",
				"$in",
				"$exists"
			],
			"correctAnswer": "$gt and $lt (or $gte and $lte)"
		},
		{
			"id": 25,
			"question": "What is an index in MongoDB used for?",
			"options": [
				"To encrypt data",
				"To speed up query performance",
				"To define data relationships",
				"To validate data"
			],
			"correctAnswer": "To speed up query performance"
		},
		{
			"id": 26,
			"question": "What does CRUD stand for in database operations?",
			"options": [
				"Create, Read, Update, Delete",
				"Compile, Run, Update, Debug",
				"Connect, Retrieve, Update, Disconnect",
				"Copy, Replace, Upload, Download"
			],
			"correctAnswer": "Create, Read, Update, Delete"
		},
		{
			"id": 27,
			"question": "Which MongoDB method is used to insert a single document into a collection?",
			"options": ["find()", "insertOne()", "update()", "delete()"],
			"correctAnswer": "insertOne()"
		},
		{
			"id": 28,
			"question": "What is the purpose of aggregation in MongoDB?",
			"options": [
				"To find specific documents.",
				"To perform data processing and transformation operations (like grouping, summing, averaging).",
				"To create indexes.",
				"To manage user permissions."
			],
			"correctAnswer": "To perform data processing and transformation operations (like grouping, summing, averaging)."
		},
		{
			"id": 29,
			"question": "What is a replica set in MongoDB?",
			"options": [
				"A way to store backups.",
				"A set of MongoDB instances that maintain the same data, providing redundancy and high availability.",
				"A tool for data visualization.",
				"A method for encrypting data."
			],
			"correctAnswer": "A set of MongoDB instances that maintain the same data, providing redundancy and high availability."
		},
		{
			"id": 30,
			"question": "What is sharding in MongoDB used for?",
			"options": [
				"To create backups.",
				"To scale horizontally by distributing data across multiple servers.",
				"To encrypt data.",
				"To manage user permissions."
			],
			"correctAnswer": "To scale horizontally by distributing data across multiple servers."
		}
	]
}
